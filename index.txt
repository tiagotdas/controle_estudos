<!DOCTYPE html>
<html lang="pt-BR" class="">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registrador de Estudos Avançado</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script>
        // Aplica o modo escuro imediatamente para evitar flash de tela clara
        if (localStorage.getItem('studyLogDarkMode') === 'true') {
            document.documentElement.classList.add('dark');
        }
    </script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            transition: background-color 0.3s, color 0.3s;
        }
        /* Estilo para a barra de rolagem */
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #f1f1f1; }
        ::-webkit-scrollbar-thumb { background: #888; border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #555; }
        .dark ::-webkit-scrollbar-track { background: #2d3748; }
        .dark ::-webkit-scrollbar-thumb { background: #718096; }
        .dark ::-webkit-scrollbar-thumb:hover { background: #a0aec0; }
        
        /* Animações */
        .fade-in { animation: fadeIn 0.5s ease-in-out; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(-10px); } to { opacity: 1; transform: translateY(0); } }
        
        .toast-enter { animation: toastIn 0.3s ease-out forwards; }
        @keyframes toastIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
        
        .toast-leave { animation: toastOut 0.3s ease-in forwards; }
        @keyframes toastOut { from { opacity: 1; transform: translateY(0); } to { opacity: 0; transform: translateY(20px); } }

        /* Estilo para botões desabilitados */
        button:disabled { opacity: 0.5; cursor: not-allowed; }
        
        /* Estilo para o color picker */
        input[type="color"] {
            -webkit-appearance: none;
            width: 40px;
            height: 40px;
            border: none;
            cursor: pointer;
            border-radius: 0.375rem; /* rounded-md */
        }
        input[type="color"]::-webkit-color-swatch-wrapper { padding: 0; }
        input[type="color"]::-webkit-color-swatch { border: none; border-radius: 0.375rem; }
    </style>
</head>
<body class="bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200">

    <!-- Container para Notificações Toast -->
    <div id="toast-container" class="fixed bottom-5 right-5 z-50 space-y-2"></div>

    <div class="container mx-auto p-4 md:p-8 max-w-7xl">
        <header class="flex justify-between items-center mb-8">
            <div class="text-left">
                <h1 class="text-4xl font-bold text-gray-900 dark:text-white">Registrador de Estudos</h1>
                <p class="text-gray-600 dark:text-gray-400 mt-2">Sua ferramenta para acompanhar o progresso e agendar revisões.</p>
            </div>
            <button id="dark-mode-toggle" class="p-2 rounded-full bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
                <!-- Ícone será inserido via JS -->
            </button>
        </header>

        <!-- Seção de Lembretes -->
        <div id="reminders-section" class="mb-8"></div>

        <main class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Coluna do Formulário e Cronômetro -->
            <div class="lg:col-span-1 bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg fade-in self-start">
                <!-- Seção do Cronômetro -->
                <div class="text-center mb-6 border-b dark:border-gray-700 pb-6">
                     <h2 class="text-2xl font-semibold mb-4">Cronômetro de Estudo</h2>
                     <div id="stopwatch-display" class="text-5xl font-mono tracking-widest bg-gray-900 dark:bg-black text-white rounded-lg py-4 mb-4">
                        00:00:00
                     </div>
                     <div class="flex justify-center space-x-3">
                        <button id="start-btn" class="bg-green-600 text-white font-semibold py-2 px-5 rounded-lg shadow-md hover:bg-green-700 transition-colors duration-300">Iniciar</button>
                        <button id="pause-btn" class="bg-yellow-500 text-white font-semibold py-2 px-5 rounded-lg shadow-md hover:bg-yellow-600 transition-colors duration-300" disabled>Pausar</button>
                        <button id="stop-btn" class="bg-red-600 text-white font-semibold py-2 px-5 rounded-lg shadow-md hover:bg-red-700 transition-colors duration-300" disabled>Parar</button>
                     </div>
                </div>

                <h2 class="text-2xl font-semibold mb-6">Novo Registro</h2>
                <form id="study-form" class="space-y-4">
                    <div class="flex items-end gap-4">
                        <div class="flex-grow">
                            <label for="subject" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Assunto</label>
                            <input type="text" id="subject" name="subject" required class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        </div>
                         <input type="color" id="subject-color" value="#54a0ff" title="Escolha uma cor para o assunto">
                    </div>
                    <div class="grid grid-cols-3 gap-4">
                        <div class="col-span-2">
                            <label for="date" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Data</label>
                            <input type="date" id="date" name="date" required class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                        </div>
                        <div>
                            <label for="lesson-number" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nº Aula</label>
                            <input type="number" id="lesson-number" name="lesson-number" min="1" class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                        </div>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="start-time" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Início</label>
                            <input type="time" id="start-time" name="start-time" required class="mt-1 block w-full px-3 py-2 bg-gray-200 dark:bg-gray-600 border border-gray-300 dark:border-gray-500 rounded-md shadow-sm" readonly>
                        </div>
                        <div>
                            <label for="end-time" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Fim</label>
                            <input type="time" id="end-time" name="end-time" required class="mt-1 block w-full px-3 py-2 bg-gray-200 dark:bg-gray-600 border border-gray-300 dark:border-gray-500 rounded-md shadow-sm" readonly>
                        </div>
                    </div>
                    <div>
                        <label for="comments" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Comentários</label>
                        <textarea id="comments" name="comments" rows="3" class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm"></textarea>
                    </div>
                    <div>
                        <label for="reminder-date" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Lembrete de Revisão</label>
                        <div class="flex items-center gap-2 mt-1">
                            <input type="date" id="reminder-date" name="reminder-date" class="block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                            <button type="button" class="reminder-shortcut-btn px-2 py-1 text-xs border dark:border-gray-600 rounded-md" data-days="1">+1d</button>
                            <button type="button" class="reminder-shortcut-btn px-2 py-1 text-xs border dark:border-gray-600 rounded-md" data-days="7">+7d</button>
                            <button type="button" class="reminder-shortcut-btn px-2 py-1 text-xs border dark:border-gray-600 rounded-md" data-days="30">+30d</button>
                        </div>
                    </div>
                    <div class="flex gap-2">
                        <button type="button" id="clear-form-btn" class="w-1/3 bg-gray-500 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-gray-600">Limpar</button>
                        <button type="submit" class="w-2/3 bg-indigo-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-indigo-700">
                           <span id="save-btn-text">Salvar Registro</span>
                        </button>
                    </div>
                </form>
            </div>

            <!-- Coluna da Tabela e Gráfico -->
            <div class="lg:col-span-2 space-y-8">
                <!-- Gráfico -->
                <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg fade-in">
                    <div class="flex justify-between items-center mb-4 border-b dark:border-gray-700 pb-3">
                         <h2 class="text-2xl font-semibold">Tempo por Assunto</h2>
                         <div class="flex rounded-lg p-1 bg-gray-200 dark:bg-gray-700">
                            <button id="pie-chart-btn" class="px-3 py-1 text-sm font-semibold rounded-md bg-indigo-600 text-white">Pizza</button>
                            <button id="bar-chart-btn" class="px-3 py-1 text-sm font-semibold rounded-md text-gray-700 dark:text-gray-300">Barras</button>
                         </div>
                    </div>
                    <div class="mx-auto">
                        <canvas id="study-chart"></canvas>
                    </div>
                </div>
                <!-- Tabela de Registros -->
                <div class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg fade-in">
                    <div class="border-b dark:border-gray-700 pb-4 mb-4">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-2xl font-semibold">Histórico de Estudos</h2>
                            <div class="flex space-x-2">
                                <button id="export-csv-btn" class="bg-green-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-green-700 text-sm">Exportar CSV</button>
                                <button id="clear-all-btn" class="bg-red-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-red-700 text-sm">Limpar Tudo</button>
                            </div>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <input type="search" id="search-input" placeholder="🔎 Pesquisar por assunto..." class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                            <div class="flex items-center gap-2">
                                <input type="date" id="filter-start-date" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                                <span class="text-gray-500 dark:text-gray-400">até</span>
                                <input type="date" id="filter-end-date" class="w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                                <button id="clear-filter-btn" class="p-2 text-sm text-gray-500 hover:text-red-500" title="Limpar filtro">✖</button>
                            </div>
                        </div>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                            <thead class="bg-gray-50 dark:bg-gray-700">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Assunto</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Data</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Duração</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Ações</th>
                                </tr>
                            </thead>
                            <tbody id="logs-table-body" class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700"></tbody>
                        </table>
                        <p id="no-data-message" class="text-center text-gray-500 py-8">Nenhum registro encontrado.</p>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Modal de Edição -->
    <div id="edit-modal" class="fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto h-full w-full hidden z-50">
        <!-- Conteúdo do modal de edição será preenchido via JS -->
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- LÓGICA DO CRONÔMETRO ---
            const display = document.getElementById('stopwatch-display');
            const startBtn = document.getElementById('start-btn');
            const pauseBtn = document.getElementById('pause-btn');
            const stopBtn = document.getElementById('stop-btn');
            const startTimeInput = document.getElementById('start-time');
            const endTimeInput = document.getElementById('end-time');

            let timerInterval = null;
            let elapsedTime = 0;
            let startTime = 0;
            let isPaused = false;
            let studySessionStartTime = null;

            const formatTime = (time) => {
                const pad = (num) => String(num).padStart(2, '0');
                const seconds = Math.floor((time / 1000) % 60);
                const minutes = Math.floor((time / (1000 * 60)) % 60);
                const hours = Math.floor((time / (1000 * 60 * 60)) % 24);
                return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
            };
            
            const formatTimeForInput = (date) => {
                const pad = (num) => String(num).padStart(2, '0');
                return `${pad(date.getHours())}:${pad(date.getMinutes())}`;
            };

            const updateDisplay = () => {
                const currentTime = Date.now();
                const currentElapsedTime = elapsedTime + (currentTime - startTime);
                display.textContent = formatTime(currentElapsedTime);
            };

            startBtn.addEventListener('click', () => {
                if (studySessionStartTime === null) {
                    studySessionStartTime = new Date();
                }
                startTime = Date.now();
                isPaused = false;
                timerInterval = setInterval(updateDisplay, 100);
                startBtn.disabled = true;
                pauseBtn.disabled = false;
                stopBtn.disabled = false;
            });

            pauseBtn.addEventListener('click', () => {
                if (!isPaused) {
                    clearInterval(timerInterval);
                    elapsedTime += Date.now() - startTime;
                    isPaused = true;
                    pauseBtn.textContent = 'Retomar';
                } else {
                    startTime = Date.now();
                    timerInterval = setInterval(updateDisplay, 100);
                    isPaused = false;
                    pauseBtn.textContent = 'Pausar';
                }
            });

            stopBtn.addEventListener('click', () => {
                clearInterval(timerInterval);
                const studySessionEndTime = new Date();
                startTimeInput.value = formatTimeForInput(studySessionStartTime);
                endTimeInput.value = formatTimeForInput(studySessionEndTime);
                display.textContent = '00:00:00';
                elapsedTime = 0;
                studySessionStartTime = null;
                isPaused = false;
                pauseBtn.textContent = 'Pausar';
                startBtn.disabled = false;
                pauseBtn.disabled = true;
                stopBtn.disabled = true;
            });

            // --- ELEMENTOS DO DOM E VARIÁVEIS GLOBAIS ---
            const form = document.getElementById('study-form');
            const tableBody = document.getElementById('logs-table-body');
            const noDataMessage = document.getElementById('no-data-message');
            const dateInput = document.getElementById('date');
            
            const darkModeToggle = document.getElementById('dark-mode-toggle');
            const toastContainer = document.getElementById('toast-container');
            const searchInput = document.getElementById('search-input');
            const filterStartDate = document.getElementById('filter-start-date');
            const filterEndDate = document.getElementById('filter-end-date');
            const clearFilterBtn = document.getElementById('clear-filter-btn');
            const clearFormBtn = document.getElementById('clear-form-btn');
            const subjectColorInput = document.getElementById('subject-color');
            const subjectInput = document.getElementById('subject');
            const remindersSection = document.getElementById('reminders-section');
            const exportCsvBtn = document.getElementById('export-csv-btn');
            const clearAllBtn = document.getElementById('clear-all-btn');

            const editModal = document.getElementById('edit-modal');
            
            const chartCanvas = document.getElementById('study-chart');
            const pieChartBtn = document.getElementById('pie-chart-btn');
            const barChartBtn = document.getElementById('bar-chart-btn');
            let studyChart = null;
            let currentChartType = 'pie';

            let studyLogs = JSON.parse(localStorage.getItem('studyLogs')) || [];
            let subjectColors = JSON.parse(localStorage.getItem('subjectColors')) || {};

            // --- FUNÇÕES UTILITÁRIAS ---
            const saveLogs = () => localStorage.setItem('studyLogs', JSON.stringify(studyLogs));
            const saveColors = () => localStorage.setItem('subjectColors', JSON.stringify(subjectColors));
            
            const calculateDuration = (start, end) => {
                if (!start || !end) return 'N/A';
                const startDate = new Date(`1970-01-01T${start}:00`);
                const endDate = new Date(`1970-01-01T${end}:00`);
                let diff = endDate.getTime() - startDate.getTime();
                if (diff < 0) diff += 24 * 60 * 60 * 1000;
                const hours = Math.floor(diff / 3600000);
                const minutes = Math.floor((diff % 3600000) / 60000);
                return `${String(hours).padStart(2, '0')}h ${String(minutes).padStart(2, '0')}m`;
            };

            const formatDate = (dateString) => {
                if (!dateString) return 'N/A';
                const [year, month, day] = dateString.split('-');
                return `${day}/${month}/${year}`;
            };

            // --- LÓGICA DE NOTIFICAÇÕES (TOAST) ---
            const showToast = (message, type = 'success') => {
                const toast = document.createElement('div');
                const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
                toast.className = `toast-enter ${bgColor} text-white font-bold py-2 px-4 rounded-lg shadow-lg`;
                toast.textContent = message;
                toastContainer.appendChild(toast);
                setTimeout(() => {
                    toast.classList.remove('toast-enter');
                    toast.classList.add('toast-leave');
                    toast.addEventListener('animationend', () => toast.remove());
                }, 3000);
            };

            // --- LÓGICA DE RENDERIZAÇÃO ---
            const renderLogs = () => {
                const searchTerm = searchInput.value.toLowerCase();
                const startDate = filterStartDate.value ? new Date(filterStartDate.value + 'T00:00:00') : null;
                const endDate = filterEndDate.value ? new Date(filterEndDate.value + 'T23:59:59') : null;

                const filteredLogs = studyLogs.filter(log => {
                    const logDate = new Date(log.date + 'T00:00:00');
                    const matchesSearch = log.subject.toLowerCase().includes(searchTerm);
                    const matchesStartDate = !startDate || logDate >= startDate;
                    const matchesEndDate = !endDate || logDate <= endDate;
                    return matchesSearch && matchesStartDate && matchesEndDate;
                });

                tableBody.innerHTML = '';
                if (filteredLogs.length === 0) {
                    noDataMessage.style.display = 'block';
                    tableBody.style.display = 'none';
                } else {
                    noDataMessage.style.display = 'none';
                    tableBody.style.display = '';
                    
                    const sortedLogs = filteredLogs.sort((a, b) => new Date(b.date) - new Date(a.date));

                    sortedLogs.forEach(log => {
                        const color = subjectColors[log.subject] || '#cccccc';
                        const row = document.createElement('tr');
                        row.className = 'fade-in dark:hover:bg-gray-700';
                        row.innerHTML = `
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex items-center">
                                    <div class="w-3 h-3 rounded-full mr-3" style="background-color: ${color};"></div>
                                    <div>
                                        <div class="text-sm font-medium text-gray-900 dark:text-white">${log.subject} ${log.lessonNumber ? `(Aula ${log.lessonNumber})` : ''}</div>
                                        <div class="text-xs text-gray-500 dark:text-gray-400">${log.comments || 'Sem comentários'}</div>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${formatDate(log.date)}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${log.duration}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <button data-id="${log.id}" class="edit-btn text-indigo-600 hover:text-indigo-900 mr-3">Editar</button>
                                <button data-id="${log.id}" class="delete-btn text-red-600 hover:text-red-900">Apagar</button>
                            </td>
                        `;
                        tableBody.appendChild(row);
                    });
                }
                checkReminders();
                renderChart(filteredLogs);
            };

            const renderChart = (logs) => {
                if (studyChart) studyChart.destroy();
                if (!logs || logs.length === 0) {
                    chartCanvas.getContext('2d').clearRect(0, 0, chartCanvas.width, chartCanvas.height);
                    return;
                }

                const subjectData = logs.reduce((acc, log) => {
                    const durationParts = log.duration.match(/(\d+)h (\d+)m/);
                    if (!durationParts) return acc;
                    const totalMinutes = parseInt(durationParts[1], 10) * 60 + parseInt(durationParts[2], 10);
                    acc[log.subject] = (acc[log.subject] || 0) + totalMinutes;
                    return acc;
                }, {});

                const labels = Object.keys(subjectData);
                const data = Object.values(subjectData);
                const backgroundColors = labels.map(label => subjectColors[label] || '#cccccc');

                studyChart = new Chart(chartCanvas, {
                    type: currentChartType,
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Minutos Estudados',
                            data: data,
                            backgroundColor: backgroundColors,
                            borderColor: backgroundColors.map(c => c.replace(/, ?0.8\)/, ', 1)')),
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: currentChartType === 'pie',
                                labels: { color: document.documentElement.classList.contains('dark') ? '#fff' : '#333' }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let label = context.label || '';
                                        if (label) label += ': ';
                                        const value = (currentChartType === 'bar') ? context.parsed.y : context.parsed;
                                        const hours = Math.floor(value / 60);
                                        const minutes = value % 60;
                                        label += `${hours}h ${minutes}m`;
                                        return label;
                                    }
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: { color: document.documentElement.classList.contains('dark') ? '#fff' : '#333' }
                            },
                            x: {
                                ticks: { color: document.documentElement.classList.contains('dark') ? '#fff' : '#333' }
                            }
                        }
                    }
                });
            };

            const checkReminders = () => {
                remindersSection.innerHTML = '';
                const today = new Date();
                today.setHours(0, 0, 0, 0);

                const pendingReminders = studyLogs.filter(log => {
                    if (!log.reminderDate) return false;
                    const reminderDate = new Date(log.reminderDate + 'T00:00:00');
                    return reminderDate <= today;
                });

                if (pendingReminders.length > 0) {
                    const reminderContainer = document.createElement('div');
                    reminderContainer.className = 'bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded-lg shadow-md fade-in dark:bg-yellow-900 dark:text-yellow-200 dark:border-yellow-400';
                    
                    let reminderList = '<h3 class="font-bold text-lg mb-2">Lembretes de Revisão!</h3><ul class="list-disc list-inside">';
                    pendingReminders.forEach(log => {
                        reminderList += `<li>Revisar: <strong>${log.subject}</strong> (estudado em ${formatDate(log.date)})</li>`;
                    });
                    reminderList += '</ul>';
                    
                    reminderContainer.innerHTML = reminderList;
                    remindersSection.appendChild(reminderContainer);
                }
            };

            // --- LÓGICA DOS EVENTOS ---
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                if (!form['start-time'].value || !form['end-time'].value) {
                    showToast('Use o cronômetro para registrar o tempo.', 'error');
                    return;
                }
                
                const subject = subjectInput.value;
                const newLog = {
                    id: Date.now(),
                    subject: subject,
                    lessonNumber: form['lesson-number'].value,
                    date: form.date.value,
                    startTime: form['start-time'].value,
                    endTime: form['end-time'].value,
                    duration: calculateDuration(form['start-time'].value, form['end-time'].value),
                    comments: form.comments.value,
                    reminderDate: form['reminder-date'].value,
                };
                
                studyLogs.push(newLog);
                subjectColors[subject] = subjectColorInput.value;
                
                saveLogs();
                saveColors();
                renderLogs();
                form.reset();
                dateInput.valueAsDate = new Date();
                subjectInput.focus();
                showToast('Registro salvo com sucesso!');
            });

            tableBody.addEventListener('click', (e) => {
                const target = e.target.closest('button');
                if (!target) return;

                if (target.classList.contains('delete-btn')) {
                    const id = parseInt(target.dataset.id, 10);
                    if (confirm('Tem certeza que deseja apagar este registro?')) {
                        studyLogs = studyLogs.filter(log => log.id !== id);
                        saveLogs();
                        renderLogs();
                        showToast('Registro apagado.', 'error');
                    }
                }

                if (target.classList.contains('edit-btn')) {
                    const id = parseInt(target.dataset.id, 10);
                    const logToEdit = studyLogs.find(log => log.id === id);
                    if (logToEdit) {
                        openEditModal(logToEdit);
                    }
                }
            });

            const openEditModal = (log) => {
                editModal.innerHTML = `
                    <div class="relative top-10 mx-auto p-5 border w-full max-w-lg shadow-lg rounded-md bg-white dark:bg-gray-800">
                        <h3 class="text-2xl font-semibold text-center mb-6">Editar Registro</h3>
                        <form id="edit-form" class="space-y-4">
                            <input type="hidden" id="edit-id" value="${log.id}">
                            <div class="flex items-end gap-4">
                                <div class="flex-grow">
                                    <label for="edit-subject" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Assunto</label>
                                    <input type="text" id="edit-subject" value="${log.subject}" required class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                                </div>
                                <input type="color" id="edit-subject-color" value="${subjectColors[log.subject] || '#54a0ff'}">
                            </div>
                            <div class="grid grid-cols-3 gap-4">
                               <div class="col-span-2">
                                    <label for="edit-date" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Data</label>
                                    <input type="date" id="edit-date" value="${log.date}" required class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                                </div>
                                <div>
                                    <label for="edit-lesson-number" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nº Aula</label>
                                    <input type="number" id="edit-lesson-number" value="${log.lessonNumber || ''}" min="1" class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <label for="edit-start-time" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Início</label>
                                    <input type="time" id="edit-start-time" value="${log.startTime}" required class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                                </div>
                                <div>
                                    <label for="edit-end-time" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Fim</label>
                                    <input type="time" id="edit-end-time" value="${log.endTime}" required class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                                </div>
                            </div>
                            <div>
                                <label for="edit-comments" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Comentários</label>
                                <textarea id="edit-comments" rows="3" class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">${log.comments || ''}</textarea>
                            </div>
                            <div>
                                <label for="edit-reminder-date" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Lembrete de Revisão</label>
                                <input type="date" id="edit-reminder-date" value="${log.reminderDate || ''}" class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm">
                            </div>
                            <div class="flex justify-end space-x-3 pt-4">
                                <button type="button" id="cancel-edit-btn" class="bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-gray-300">Cancelar</button>
                                <button type="submit" class="bg-indigo-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-indigo-700">Salvar Alterações</button>
                            </div>
                        </form>
                    </div>
                `;
                editModal.classList.remove('hidden');
                
                document.getElementById('cancel-edit-btn').addEventListener('click', () => editModal.classList.add('hidden'));
                
                document.getElementById('edit-form').addEventListener('submit', (e) => {
                    e.preventDefault();
                    const id = parseInt(document.getElementById('edit-id').value, 10);
                    const logIndex = studyLogs.findIndex(log => log.id === id);

                    if (logIndex > -1) {
                        const startTime = document.getElementById('edit-start-time').value;
                        const endTime = document.getElementById('edit-end-time').value;
                        const subject = document.getElementById('edit-subject').value;

                        studyLogs[logIndex] = {
                            ...studyLogs[logIndex],
                            subject: subject,
                            lessonNumber: document.getElementById('edit-lesson-number').value,
                            date: document.getElementById('edit-date').value,
                            startTime: startTime,
                            endTime: endTime,
                            duration: calculateDuration(startTime, endTime),
                            comments: document.getElementById('edit-comments').value,
                            reminderDate: document.getElementById('edit-reminder-date').value,
                        };
                        
                        subjectColors[subject] = document.getElementById('edit-subject-color').value;

                        saveLogs();
                        saveColors();
                        renderLogs();
                        editModal.classList.add('hidden');
                        showToast('Registro atualizado com sucesso!');
                    }
                });
            };

            // Eventos de Filtro e Pesquisa
            [searchInput, filterStartDate, filterEndDate].forEach(el => el.addEventListener('input', renderLogs));
            clearFilterBtn.addEventListener('click', () => {
                filterStartDate.value = '';
                filterEndDate.value = '';
                searchInput.value = '';
                renderLogs();
            });
            
            // Eventos do Formulário
            clearFormBtn.addEventListener('click', () => {
                form.reset();
                dateInput.valueAsDate = new Date();
                subjectInput.focus();
            });
            
            subjectInput.addEventListener('input', () => {
                const color = subjectColors[subjectInput.value];
                if (color) subjectColorInput.value = color;
            });

            document.querySelectorAll('.reminder-shortcut-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const days = parseInt(e.target.dataset.days, 10);
                    const studyDate = new Date(dateInput.value + 'T00:00:00');
                    studyDate.setDate(studyDate.getDate() + days);
                    document.getElementById('reminder-date').value = studyDate.toISOString().split('T')[0];
                });
            });

            // Eventos do Gráfico
            pieChartBtn.addEventListener('click', () => {
                currentChartType = 'pie';
                renderLogs();
                pieChartBtn.classList.add('bg-indigo-600', 'text-white');
                pieChartBtn.classList.remove('text-gray-700', 'dark:text-gray-300');
                barChartBtn.classList.remove('bg-indigo-600', 'text-white');
                barChartBtn.classList.add('text-gray-700', 'dark:text-gray-300');
            });

            barChartBtn.addEventListener('click', () => {
                currentChartType = 'bar';
                renderLogs();
                barChartBtn.classList.add('bg-indigo-600', 'text-white');
                barChartBtn.classList.remove('text-gray-700', 'dark:text-gray-300');
                pieChartBtn.classList.remove('bg-indigo-600', 'text-white');
                pieChartBtn.classList.add('text-gray-700', 'dark:text-gray-300');
            });

            // Lógica do Modo Escuro
            const sunIcon = `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>`;
            const moonIcon = `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path></svg>`;
            
            const updateDarkModeIcon = () => {
                darkModeToggle.innerHTML = document.documentElement.classList.contains('dark') ? sunIcon : moonIcon;
            };

            darkModeToggle.addEventListener('click', () => {
                document.documentElement.classList.toggle('dark');
                localStorage.setItem('studyLogDarkMode', document.documentElement.classList.contains('dark'));
                updateDarkModeIcon();
                renderLogs(); // Re-renderiza para atualizar as cores do gráfico
            });
            
            // Eventos de Ações Gerais
            exportCsvBtn.addEventListener('click', () => {
                if (studyLogs.length === 0) {
                    showToast('Não há dados para exportar.', 'error');
                    return;
                }
                const headers = ['ID', 'Assunto', 'Nº Aula', 'Data', 'Início', 'Fim', 'Duração', 'Comentários', 'Lembrete'];
                const rows = studyLogs.map(log => [
                    log.id,
                    `"${log.subject.replace(/"/g, '""')}"`,
                    log.lessonNumber || '',
                    formatDate(log.date),
                    log.startTime,
                    log.endTime,
                    log.duration,
                    `"${(log.comments || '').replace(/"/g, '""')}"`,
                    log.reminderDate ? formatDate(log.reminderDate) : ''
                ].join(','));

                const csvContent = [headers.join(','), ...rows].join('\n');
                const blob = new Blob([`\uFEFF${csvContent}`], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'registros_de_estudo.csv';
                link.click();
                showToast('Exportação para CSV iniciada.');
            });

            clearAllBtn.addEventListener('click', () => {
                if (studyLogs.length === 0) {
                    showToast('Não há registros para limpar.', 'error');
                    return;
                }
                if (confirm('ATENÇÃO! Você tem certeza que deseja apagar TODOS os registros? Esta ação não pode ser desfeita.')) {
                    studyLogs = [];
                    subjectColors = {};
                    saveLogs();
                    saveColors();
                    renderLogs();
                    showToast('Todos os registros foram apagados.', 'error');
                }
            });

            // --- INICIALIZAÇÃO ---
            dateInput.valueAsDate = new Date();
            updateDarkModeIcon();
            renderLogs();
        });
    </script>
</body>
</html>
